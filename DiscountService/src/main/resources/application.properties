spring.application.name=${SPRING_APPLICATION_NAME:DiscountService}

# =====================================================
# Server Configuration (Dynamic for Render)
# =====================================================
server.port=${PORT:8090}

# =====================================================
# Database Configuration (PostgreSQL)
# =====================================================
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/discounts_db}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:postgres}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:Ravi12345}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# =====================================================
# Eureka Configuration (Service Registry)
# =====================================================
eureka.client.service-url.defaultZone=${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://localhost:8761/eureka}
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.instance.prefer-ip-address=true

# =====================================================
# Cloudinary Configuration
# =====================================================
cloudinary.cloud_name=${CLOUDINARY_CLOUD_NAME}
cloudinary.api_key=${CLOUDINARY_API_KEY}
cloudinary.api_secret=${CLOUDINARY_API_SECRET}

# =====================================================
# Kafka Configuration (Optional, if used for async updates)
# =====================================================
spring.kafka.bootstrap-servers=${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
spring.kafka.properties.security.protocol=${SPRING_KAFKA_PROPERTIES_SECURITY_PROTOCOL:SASL_SSL}
spring.kafka.properties.sasl.mechanism=${SPRING_KAFKA_PROPERTIES_SASL_MECHANISM:PLAIN}
spring.kafka.properties.sasl.jaas.config=${SPRING_KAFKA_PROPERTIES_SASL_JAAS_CONFIG}
spring.kafka.properties.ssl.truststore.type=${SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_TYPE:PEM}
spring.kafka.properties.ssl.truststore.certificates=${SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_CERTIFICATES}

# Producer config (if you publish discount events)
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

# =====================================================
# Spring Profile
# =====================================================
spring.profiles.active=${SPRING_PROFILES_ACTIVE:prod}

